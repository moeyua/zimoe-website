---
import { Image } from 'astro:assets'

interface Props {
  class: string
  images: Array<ImageMetadata>
  size?: { width: number; height: number }
}

const { class: className, images, size = { width: 320, height: 180 } } = Astro.props
---

<astro-carousel class="relative" class:list={className} style={`min-width: ${size.width}px; height: ${size.height}px;`}>
  <div>
    {
      images.map((image, index) => (
        <Image
          src={image}
          alt="A description of my image."
          class="b-(4 white rd-3) absolute top-0 carousel-card transition-all-300 hover:transform-scale-110"
          class:list={[`z-${index}`]}
          style={`width: ${size.width}px; height: ${size.height}px; left: -${index * (size.width * 0.45)}px;`}
          un-shadow="[8px_0px_30px_-10px_rgba(155,237,248,0.50)]"
          data-index={index}
        />
      ))
    }
  </div>
</astro-carousel>

<script>
  class Carousel extends HTMLElement {
    connectedCallback() {
      const cards = this.querySelectorAll('.carousel-card') as NodeListOf<HTMLElement>
      cards.forEach((card) => {
        card.addEventListener('mouseenter', (event) => {
          if (!event.currentTarget) {
            return
          }
          const target = event.currentTarget as HTMLElement
          const cardIndex = Number.parseInt(target.getAttribute('data-index') as string)
          handleMouseEnter(cardIndex, cards)
        })
      })

      function handleMouseEnter(cardIndex: number, cards: NodeListOf<HTMLElement>) {
        cards.forEach((card, index) => {
          let zIndex = 0
          if (index === cardIndex) {
            zIndex = 999
          } else {
            zIndex = 999 - Math.abs(index - cardIndex)
          }
          card.style.zIndex = zIndex.toString()
        })
      }
    }
  }

  customElements.define('astro-carousel', Carousel)
</script>
